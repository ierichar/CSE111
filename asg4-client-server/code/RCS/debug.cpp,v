head	1.3;
access;
symbols;
locks;
comment	@// @;


1.3
date	2021.11.08.08.01.44;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.05.18.08.32.29;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.05.18.07.38.26;	author -;	state -;
branches;
next	;


desc
@@


1.3
log
@-
@
text
@// $Id: debug.cpp,v 1.15 2020-01-22 14:21:55-08 - - $

#include <climits>
#include <iostream>
#include <vector>

using namespace std;

#include "debug.h"

debugflags::flagset_ debugflags::flags_ {};

void debugflags::setflags (const string& initflags) {
   for (const unsigned char flag: initflags) {
      if (flag == '@@') flags_.set();
                  else flags_.set (flag, true);
   }
}

// getflag -
//    Check to see if a certain flag is on.

bool debugflags::getflag (char flag) {
   // WARNING: Don't TRACE this function or the stack will blow up.
   return flags_.test (static_cast<unsigned char> (flag));
}

void debugflags::where (char flag, const char* file, int line,
                        const char* pretty_function) {
   cout << "DEBUG(" << flag << ") "
        << file << "[" << line << "] " << endl
        << "... " << pretty_function << endl;
}

@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.1 2021-05-18 00:38:26-07 - - $
d11 1
a11 1
debugflags::flagset debugflags::flags {};
d15 2
a16 2
      if (flag == '@@') flags.set();
                  else flags.set (flag, true);
d25 1
a25 1
   return flags.test (static_cast<unsigned char> (flag));
d30 3
a32 2
   cerr << "DEBUG(" << flag << ") " << file << "[" << line << "] " 
        << pretty_function << endl;
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: debug.cpp,v 1.2 2021-03-31 19:46:57-07 - - $
d30 2
a31 3
   cerr << ": DEBUG(" << flag << ") "
        << file << "[" << line << "] " << endl
        << "   " << pretty_function << endl;
@
