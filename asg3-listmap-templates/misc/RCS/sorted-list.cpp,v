head	1.37;
access;
symbols;
locks;
comment	@// @;


1.37
date	2021.11.03.23.42.42;	author -;	state -;
branches;
next	1.36;

1.36
date	2021.11.03.23.40.53;	author -;	state -;
branches;
next	1.35;

1.35
date	2021.11.03.23.37.38;	author -;	state -;
branches;
next	1.34;

1.34
date	2021.11.03.23.36.10;	author -;	state -;
branches;
next	1.33;

1.33
date	2021.11.03.23.34.52;	author -;	state -;
branches;
next	1.32;

1.32
date	2021.11.03.19.21.37;	author -;	state -;
branches;
next	1.31;

1.31
date	2021.11.03.19.18.56;	author -;	state -;
branches;
next	1.30;

1.30
date	2021.11.03.19.16.59;	author -;	state -;
branches;
next	1.29;

1.29
date	2021.11.03.19.16.09;	author -;	state -;
branches;
next	1.28;

1.28
date	2021.11.03.19.15.24;	author -;	state -;
branches;
next	1.27;

1.27
date	2021.11.03.19.14.57;	author -;	state -;
branches;
next	1.26;

1.26
date	2021.11.03.19.11.35;	author -;	state -;
branches;
next	1.25;

1.25
date	2021.11.03.19.10.23;	author -;	state -;
branches;
next	1.24;

1.24
date	2021.11.03.19.09.29;	author -;	state -;
branches;
next	1.23;

1.23
date	2021.11.03.19.07.28;	author -;	state -;
branches;
next	1.22;

1.22
date	2021.11.03.19.06.31;	author -;	state -;
branches;
next	1.21;

1.21
date	2021.11.03.19.06.20;	author -;	state -;
branches;
next	1.20;

1.20
date	2021.11.03.19.06.04;	author -;	state -;
branches;
next	1.19;

1.19
date	2021.11.03.19.00.39;	author -;	state -;
branches;
next	1.18;

1.18
date	2021.11.03.19.00.02;	author -;	state -;
branches;
next	1.17;

1.17
date	2021.11.03.18.59.29;	author -;	state -;
branches;
next	1.16;

1.16
date	2021.11.03.18.55.11;	author -;	state -;
branches;
next	1.15;

1.15
date	2021.11.03.18.54.41;	author -;	state -;
branches;
next	1.14;

1.14
date	2021.11.03.18.51.59;	author -;	state -;
branches;
next	1.13;

1.13
date	2021.11.03.18.51.48;	author -;	state -;
branches;
next	1.12;

1.12
date	2021.11.03.18.49.07;	author -;	state -;
branches;
next	1.11;

1.11
date	2021.11.03.18.46.21;	author -;	state -;
branches;
next	1.10;

1.10
date	2021.11.03.18.44.45;	author -;	state -;
branches;
next	1.9;

1.9
date	2021.11.03.18.43.59;	author -;	state -;
branches;
next	1.8;

1.8
date	2021.11.03.18.28.04;	author -;	state -;
branches;
next	1.7;

1.7
date	2021.11.01.00.00.38;	author -;	state -;
branches;
next	1.6;

1.6
date	2021.10.31.23.59.53;	author -;	state -;
branches;
next	1.5;

1.5
date	2021.10.31.23.59.04;	author -;	state -;
branches;
next	1.4;

1.4
date	2021.10.31.23.57.27;	author -;	state -;
branches;
next	1.3;

1.3
date	2021.10.31.23.57.10;	author -;	state -;
branches;
next	1.2;

1.2
date	2021.10.31.23.54.50;	author -;	state -;
branches;
next	1.1;

1.1
date	2021.10.31.23.51.34;	author -;	state -;
branches;
next	;


desc
@@


1.37
log
@-
@
text
@// $Id: sorted-list.cpp,v 1.32 2021-11-03 12:21:37-07 - - $

//
// List insertion algorithm.
// Insert nodes into a singly-linked list using only operator<
// to form comparisons.  Do not insert elements that already
// exist.
//

#include <cmath>
#include <iostream>
#include <stdexcept>
#include <string>
#include <vector>
using namespace std;

template <typename Type>
struct xless {
   bool operator() (const Type& left, const Type& right) const {
      return left < right;
   }
};

template <typename Type>
struct xgreater {
   bool operator() (const Type& left, const Type& right) const {
      return left > right;
   }
};


template <typename item_t, class less_t=xless<item_t>>
struct sorted_list {
   struct node {
      item_t item;
      node* link;
      node (const item_t& item_, node* link_):
                  item(item_),   link(link_) {
      }
   };
   less_t less;
   node* head = nullptr;

   sorted_list() = default; // Needed because default is suppressed.
   sorted_list (const sorted_list&) = delete;
   sorted_list& operator= (const sorted_list&) = delete;
   sorted_list (sorted_list&&) = delete;
   sorted_list& operator= (sorted_list&&) = delete;
   ~sorted_list();

   void insert (const item_t& newitem);
   const item_t& front() const { return head->item; }
   void pop_front();
};

template <typename item_t, class less_t>
sorted_list<item_t,less_t>::~sorted_list() {
   while (head != nullptr) pop_front();
}

template <typename item_t, class less_t>
void sorted_list<item_t,less_t>::insert (const item_t& newitem) {
   node** curr = &head;
   while (*curr != nullptr and less ((*curr)->item, newitem)) {
      curr = &(*curr)->link;
   }
   if (*curr == nullptr or less (newitem, (*curr)->item)) {
      *curr = new node (newitem, *curr);
   }
}

template <typename item_t, class less_t>
void sorted_list<item_t,less_t>::pop_front() {
   if (head == nullptr) throw underflow_error (__PRETTY_FUNCTION__);
   node* old = head;
   head = head->link;
   delete old;
}

template <typename item_t, class less_t=xless<item_t>>
void process (size_t argc, const char* const* const argv,
              const string& label) {
   sorted_list<item_t,less_t> list;
   cout << label << ": insert:" << endl;
   for (const char* const* argp = &argv[1];
        argp != &argv[argc]; ++argp) {
      cout << " " << *argp;
      list.insert (*argp);
   }
   cout << endl;
   cout << label << ": sorted:" << endl;
   for (auto itor = list.head; itor != nullptr; itor = itor->link) {
      cout << " " << itor->item;
   }
   cout << endl << endl;
}

void process (const vector<double>& ndata) {
   sorted_list<double> list;
   cout << "double: insert:" << endl;
   for (double num: ndata) { cout << " " << num; list.insert (num); }
   cout << endl;
   cout << "double: sorted:" << endl;
   for (auto itor = list.head; itor != nullptr; itor = itor->link) {
      cout << " " << itor->item;
   }
   cout << endl;
   cout << endl;
}

int main() {
   static const char* const sdata[] {
      "sortedlist", "Foo", "Bar", "Baz", "qux", "zxcvbnm", "asdfg",
      "qwerty", "Bar", "Baz", "Foo", "qwerty", "hello", "HELLO",
   };
   constexpr size_t sdata_size = sizeof sdata / sizeof *sdata;
   process<const char*> (sdata_size, sdata, "char*: Char*");
   process<string> (sdata_size, sdata, "string: Default");
   process<string,xgreater<string>> (sdata_size, sdata,
               "string: Greater");
   static const vector<double> ndata {
      1./0., 1./3., 1.024e6, acos(-1.), exp(1.), log(0.5), sqrt(2.),
   };
   process (ndata);
   return 0;
}

/*
//TEST// alias grind='valgrind --leak-check=full --show-reachable=yes'
//TEST// grind --log-file=sortedlist.out.log >sortedlist.out 2>&1
//TEST// mkpspdf sortedlist.ps sortedlist.cpp* sortedlist.out*
*/
@


1.36
log
@-
@
text
@d98 1
a98 2
template <typename container_t, class less_t=xless<item_t>>
void process (const container& data, const string& label) {
d100 2
a101 2
   cout << label << ": insert:" << endl;
   for (double num: data) { cout << " " << num; list.insert (num); }
d103 1
a103 1
   cout << label << ": sorted:" << endl;
a110 31
static const char* const sdata[] {
   "sortedlist", "Foo", "Bar", "Baz", "qux", "zxcvbnm", "asdfg",
   "qwerty", "Bar", "Baz", "Foo", "qwerty", "hello", "HELLO",
};
constexpr size_t sdata_size = sizeof sdata / sizeof *sdata;

static const vector<double> ndata {
   1./0., 1./3., 1.024e6, acos(-1.), exp(1.), log(0.5), sqrt(2.),
};

struct name {
   string first;
   string last;
};
vector<name> names {
   {"Ada", "Lovelace"},
   {"Charles", "Babage"},
   {"Alan", "Turing"},
   {"Alonzo", "Church"},
}
ostream& operator<< (ostream& out, const name& who) {
   return cout << who.first << " " << who.second;
}
struct less_name {
   bool operator< (const name& one, const name& two) {
      if (one.second < two.second) return true;
      if (two.second < one.second) return false;
      return one.first < two.first;
   }
};

d112 5
d121 3
a124 2
// process (names); // error: 'item_t' was not declared in this scope
   process<vector<name>>,less_name> (names, "names");
@


1.35
log
@-
@
text
@d135 7
d149 2
a150 1
   process (names); // error: 'item_t' was not declared in this scope
@


1.34
log
@-
@
text
@d125 2
a126 1
} names {
d142 1
a142 1
   process (names);
@


1.33
log
@-
@
text
@d131 3
@


1.32
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.31 2021-11-03 12:18:56-07 - - $
d98 2
a99 1
void process (const vector<double>& ndata) {
d101 2
a102 2
   cout << "double: insert:" << endl;
   for (double num: ndata) { cout << " " << num; list.insert (num); }
d104 1
a104 1
   cout << "double: sorted:" << endl;
d112 20
a132 5
   static const char* const sdata[] {
      "sortedlist", "Foo", "Bar", "Baz", "qux", "zxcvbnm", "asdfg",
      "qwerty", "Bar", "Baz", "Foo", "qwerty", "hello", "HELLO",
   };
   constexpr size_t sdata_size = sizeof sdata / sizeof *sdata;
a136 3
   static const vector<double> ndata {
      1./0., 1./3., 1.024e6, acos(-1.), exp(1.), log(0.5), sqrt(2.),
   };
d138 1
@


1.31
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.30 2021-11-03 12:16:59-07 - - $
d122 1
a122 6
1./0.,
1./3., 
1e6,
acos(-1.),
exp(1.),
sqrt(2.),
@


1.30
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.29 2021-11-03 12:16:09-07 - - $
a122 1
-sqrt(5.),
d124 1
@


1.29
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.26 2021-11-03 12:11:35-07 - - $
d122 2
@


1.28
log
@-
@
text
@a10 1
#include <iomanip>
a11 1
#include <limits>
a98 1
   cout << setprecision (numeric_limits<double>::max_digits10);
@


1.27
log
@-
@
text
@d11 1
@


1.26
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.25 2021-11-03 12:10:23-07 - - $
d12 1
d100 2
a101 1
   sorted_list<double,greater<double>> list;
d124 4
a127 1
      acos(-1.), exp(1.), sqrt(2.), 1./3., 
@


1.25
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.24 2021-11-03 12:09:29-07 - - $
a53 10

   struct iterator {
      node* pos = nullptr;
      iterator (node* ptr): pos(ptr) {}
      bool operator!= (iterator& that) { return pos != that.pos; }
      iterator& operator++() { ++pos; return *this; }
      item_t* operator*() { return &(pos->item); }
   };
   iterator begin() { return head; }
   iterator end() { return nullptr; }
d104 3
a106 1
//   for (auto itor: list) cout << " " << itor;
@


1.24
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.19 2021-11-03 12:00:39-07 - - $
d114 1
a114 1
   for (auto itor: list) cout << " " << itor;
@


1.23
log
@-
@
text
@d129 4
@


1.22
log
@-
@
text
@d57 1
@


1.21
log
@-
@
text
@d57 1
a57 1
      bool operator!= (iterator& that) { return pos != that.pos: }
@


1.20
log
@-
@
text
@d60 1
a60 1
   }
@


1.19
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.18 2021-11-03 12:00:02-07 - - $
d54 9
@


1.18
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.17 2021-11-03 11:59:29-07 - - $
d99 1
a99 1
   sorted_list<double,greater<double> list;
@


1.17
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.16 2021-11-03 11:55:11-07 - - $
d99 1
a99 1
   sorted_list<double,greater<double>) list;
d101 1
a101 4
   for (double num: ndata) {
      cout << " " << num;
      list.insert (num);
   }
@


1.16
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.15 2021-11-03 11:54:41-07 - - $
d91 1
a91 1
   cout << label << ": Sorted:" << endl;
d96 14
@


1.15
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.14 2021-11-03 11:51:59-07 - - $
a107 5
   static const double ndata[] {
      acos(-1.), exp(1.), sqrt(2.), 1./3., 
   };
   constexpr size_t ndata_size = sizeof ndata / sizeof *ndata;
   process<double> (ndata_size, ndata, "Default");
@


1.14
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.13 2021-11-03 11:51:48-07 - - $
d104 4
a107 3
   process<const char*> (sdata_size, sdata, "Char*");
   process<string> (sdata_size, sdata, "Default");
   process<string,xgreater<string>> (sdata_size, sdata, "Greater");
d111 2
@


1.13
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.12 2021-11-03 11:49:07-07 - - $
d10 1
@


1.12
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.11 2021-11-03 11:46:21-07 - - $
d98 1
a98 1
   static const char* const data[] {
d102 7
a108 4
   constexpr size_t data_size = sizeof data / sizeof *data;
   process<const char*> (data_size, data, "Char*");
   process<string> (data_size, data, "Default");
   process<string,xgreater<string>> (data_size, data, "Greater");
@


1.11
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.10 2021-11-03 11:44:45-07 - - $
d83 1
d86 1
a86 1
      cout << label << ": Insert: " << *argp << endl;
d90 1
d92 1
a92 1
      cout << label << ": Sorted: " << itor->item << endl;
d94 1
a94 1
   cout << endl;
@


1.10
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.9 2021-11-03 11:43:59-07 - - $
d98 1
a98 1
      "qwerty", "Bar", "Baz", "Foo", "qwerty", "HELLO", "hello",
@


1.9
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.8 2021-11-03 11:28:04-07 - - $
d101 1
a101 1
   process (data_size, data, "Char*");
@


1.8
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.7 2021-10-31 17:00:38-07 - - $
d101 1
@


1.7
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.6 2021-10-31 16:59:53-07 - - $
d97 2
a98 2
      "sortedlist", "foo", "bar", "baz", "qux", "zxcvbnm", "asdfg",
      "qwerty", "bar", "baz", "foo", "qwerty", "hello", "hello",
@


1.6
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.5 2021-10-31 16:59:04-07 - - $
d83 2
a84 1
   for (char** argp = &argv[1]; argp != &argv[argc]; ++argp) {
@


1.5
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.4 2021-10-31 16:57:27-07 - - $
d80 2
a81 1
void process (int argc, char** argv, const string& label) {
@


1.4
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.3 2021-10-31 16:57:10-07 - - $
a92 6

const char* const data[] {
   "sortedlist", "foo", "bar", "baz", "qux", "zxcvbnm", "asdfg",
   "qwerty", "bar", "baz", "foo", "qwerty", "hello", "hello",
};
constexpr size_t data_size = sizeof data / sizeof *data;
d94 5
@


1.3
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.2 2021-10-31 16:54:50-07 - - $
d98 1
a98 1
contexpr size_t data_size = sizeof data / sizeof *data;
@


1.2
log
@-
@
text
@d1 1
a1 1
// $Id: sorted-list.cpp,v 1.1 2021-10-31 16:51:34-07 - - $
d94 1
a94 1
vector<string> data {
d98 4
a101 3
int main (int argc, char** argv) {
   process<string> (argc, argv, "Default");
   process<string,xgreater<string>> (argc, argv, "Greater");
@


1.1
log
@-
@
text
@d1 1
a1 1
// $Id: sortedlist.cpp,v 1.15 2021-05-06 17:51:57-07 - - $
d13 1
d93 5
d106 1
a106 4
//TEST// grind --log-file=sortedlist.out.log \
//TEST//       sortedlist foo bar baz qux zxcvbnm asdfg qwerty \
//TEST//       bar baz foo qwerty hello hello 01234 56789 \
//TEST//       >sortedlist.out 2>&1
@
